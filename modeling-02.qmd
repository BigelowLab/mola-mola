---
title: "Modeling by month"
cache: true
---


## Load data

Here we load the observation and background data points. We add a column identifying the month of the year. 

```{r}
obs = sf::read_sf(file.path("data", "obs", "obs-covariates.gpkg")) |>
  sf::st_set_geometry("geometry") |>
  dplyr::mutate(month = factor(format(month_id, "%b"), levels = month.abb), 
                .before = geometry)
bkg = sf::read_sf(file.path("data", "bkg", "bkg-covariates.gpkg")) |>
  sf::st_set_geometry("geometry") |>
  dplyr::mutate(month = factor(format(month_id, "%b"), levels = month.abb), 
                .before = geometry)
```

## Do we model every month?

Let's do a quick check by counting each by month. Note that we drop the spatial info so that we can make simply tallies.

```{r}
sf::st_drop_geometry(obs) |> 
  dplyr::count(month, name = "n_obs") |>
  dplyr::left_join(sf::st_drop_geometry(bkg) |> dplyr::count(month, name = "n_bkg"), 
                   by = 'month') |>
  print(n = 12)
```

Given the paucity of observations during the colder months, we can restrict our models to April through November.


## Split into training and testing groups

Let's split the two into training (80%) and testing (20%) groups.  
We build our models models on the training groups, and, later, we can see that the model might predict for the test cases.

We will make a vector of "training"/"testing" flags to indicate which are training and which are for testing for each of the data sets, `obs` and `bkg`. Note we set the seed to a fixed number so that the random selection is reproducible. Finally, we add this grouping to each table and then resave for future use.

```{r}
set.seed(1234)

obs_flag = rep("training", nrow(obs))
ix_test <- sample(nrow(obs), nrow(obs) * 0.2)
obs_flag[ix_text] = "testing"
obs = dplyr::mutate(obs, training = obs_flag) |>
  sf::write_sf(file.path("data", "obs", "obs-covariates.gpkg"))


bkg_flag = rep("training", nrow(bkg))
ix_test <- sample(nrow(bkg), nrow(bkg) * 0.2)
bkg_flag[ix_text] = "testing"
obs = dplyr::mutate(bkg, training = bkg_flag) |>
  sf::write_sf(file.path("data", "bkg", "bkg7-covariates.gpkg"))

```

